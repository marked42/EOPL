#lang eopl

(require "parser.rkt")
(require "expression.rkt")
(require "environment.rkt")
(require "value.rkt")
(provide (all-defined-out))

(define (run str)
  (value-of-program (scan&parse str))
  )

(define (value-of-program prog)
  (cases program prog
    (a-program (exp1) (value-of-exp exp1 (init-env)))
    )
  )

(define (extend-mul-env-let* vars exps env)
  (if (null? vars)
      env
      (let ((first-var (car vars)) (first-exp (car exps)))
        (let ((new-env (extend-env first-var (value-of-exp first-exp env) env)))
          ; let* evalutates with previous defined variable visible to following initialization expression
          (extend-mul-env-let* (cdr vars) (cdr exps) new-env))
        )
      )
  )

(define (extend-env-unpack vars val env)
  (cond
    ((and (null? vars) (null-val? val)) env)
    ((and (pair? vars) (cell-val? val))
     (let ((first-var (car vars)) (first-val (cell-val->first val)))
       ; define vars from left to right
       (let ((new-env (extend-env first-var first-val env)))
         (extend-env-unpack (cdr vars) (cell-val->second val) new-env)
         )
       )
     )
    (else (report-unpack-unequal-vars-list-count val))
    )
  )

; get value of a list of exp
(define (value-of-exps exps env)
  (map (lambda (exp) (value-of-exp exp env)) exps)
  )

(define (value-of-exp exp env)
  (cases expression exp
    ; number constant
    (const-exp (num) (num-val num))
    ; subtraction of two numbers
    (diff-exp (exp1 exp2)
              (let ((val1 (value-of-exp exp1 env))
                    (val2 (value-of-exp exp2 env)))
                (let ((num1 (expval->num val1))
                      (num2 (expval->num val2)))
                  (num-val (- num1 num2))
                  )
                )
              )
    (sum-exp (exp1 exp2)
             (let ((val1 (value-of-exp exp1 env))
                   (val2 (value-of-exp exp2 env)))
               (let ((num1 (expval->num val1))
                     (num2 (expval->num val2)))
                 (num-val (+ num1 num2))
                 )
               )
             )
    (mul-exp (exp1 exp2)
             (let ((val1 (value-of-exp exp1 env))
                   (val2 (value-of-exp exp2 env)))
               (let ((num1 (expval->num val1))
                     (num2 (expval->num val2)))
                 (num-val (* num1 num2))
                 )
               )
             )
    (div-exp (exp1 exp2)
             (let ((val1 (value-of-exp exp1 env))
                   (val2 (value-of-exp exp2 env)))
               (let ((num1 (expval->num val1))
                     (num2 (expval->num val2)))
                 (num-val (/ num1 num2))
                 )
               )
             )
    (equal?-exp (exp1 exp2)
                (let ((val1 (value-of-exp exp1 env))
                      (val2 (value-of-exp exp2 env)))
                  (let ((num1 (expval->num val1))
                        (num2 (expval->num val2)))
                    (bool-val (equal? num1 num2))
                    )
                  )
                )
    (greater?-exp (exp1 exp2)
                  (let ((val1 (value-of-exp exp1 env))
                        (val2 (value-of-exp exp2 env)))
                    (let ((num1 (expval->num val1))
                          (num2 (expval->num val2)))
                      (bool-val (> num1 num2))
                      )
                    )
                  )
    (less?-exp (exp1 exp2)
               (let ((val1 (value-of-exp exp1 env))
                     (val2 (value-of-exp exp2 env)))
                 (let ((num1 (expval->num val1))
                       (num2 (expval->num val2)))
                   (bool-val (< num1 num2))
                   )
                 )
               )
    (minus-exp (exp1)
               (let ((val1 (value-of-exp exp1 env)))
                 (let ((num1 (expval->num val1)))
                   (num-val (- 0 num1))
                   )
                 )
               )
    ; true only if exp1 is number 0
    (zero?-exp (exp1)
               (let ((val (value-of-exp exp1 env)))
                 (let ((num (expval->num val)))
                   (if (zero? num)
                       (bool-val #t)
                       (bool-val #f)
                       )
                   )
                 )
               )
    (if-exp (exp1 exp2 exp3)
            (let ((val1 (value-of-exp exp1 env)))
              (if (expval->bool val1)
                  (value-of-exp exp2 env)
                  (value-of-exp exp3 env)
                  )
              )
            )
    (var-exp (var)
             (apply-env env var)
             )
    (let-exp (vars exps body)
             (let ((vals (value-of-exps exps env)))
               (value-of-exp body (extend-mul-env vars vals env))
               )
             )
    (let*-exp (vars exps body)
              (value-of-exp body (extend-mul-env-let* vars exps env))
              )
    (unpack-exp (vars exp body)
                (let ((val (value-of-exp exp env)))
                  (value-of-exp body (extend-env-unpack vars val env))
                  )
                )
    (cons-exp (exp1 exp2)
              (let ((val1 (value-of-exp exp1 env)) (val2 (value-of-exp exp2 env)))
                (cell-val val1 val2)
                )
              )
    (car-exp (exp1)
             (let ((val1 (value-of-exp exp1 env)))
               (cell-val->first val1)
               )
             )
    (cdr-exp (exp1)
             (let ((val1 (value-of-exp exp1 env)))
               (cell-val->second val1)
               )
             )
    (emptylist-exp ()
                   (null-val)
                   )
    (null?-exp (exp1)
               (let ((val1 (value-of-exp exp1 env)))
                 (cases expval val1
                   (null-val () (bool-val #t))
                   (else (bool-val #f))
                   )
                 )
               )
    (list-exp (exp1 exps)
              (let (
                    (val1 (value-of-exp exp1 env))
                    (vals (value-of-exps exps env)))
                (letrec ((loop (lambda (vals)
                                 (if (null? vals)
                                     (null-val)
                                     (let ((first (car vals)) (rest (cdr vals)))
                                       (cell-val first (loop rest))
                                       )
                                     )
                                 )))
                  (loop (cons val1 vals))
                  )
                )
              )
    (cond-exp (cond-exps act-exps)
              (let ((cond-vals (value-of-exps cond-exps env))
                    (act-vals (value-of-exps act-exps env))
                    )
                (letrec ((return-first-true-cond
                          (lambda (cond-vals act-vals)
                            (if (null? cond-vals)
                                (report-cond-no-true-predicate exp)
                                (let ((first-cond (car cond-vals))
                                      (first-act (car act-vals))
                                      (rest-conds (cdr cond-vals))
                                      (rest-acts (cdr act-vals))
                                      )
                                  (cases expval first-cond
                                    (bool-val (bool)
                                              (if bool
                                                  first-act
                                                  (return-first-true-cond rest-conds rest-acts)
                                                  )
                                              )
                                    (else (report-cond-invalid-predicate exp))
                                    )
                                  )
                                )
                            )))
                  (return-first-true-cond cond-vals act-vals)
                  )
                )
              )
    (print-exp (exp1)
               (let ((val1 (value-of-exp exp1 env)))
                 (display val1)
                 (num-val 1)
                 )
               )
    (else 42)
    )
  )


(define (report-cond-no-true-predicate exp)
  (eopl:error 'cond-exp "No true cond for exp ~s" exp)
  )

(define (report-cond-invalid-predicate exp)
  (eopl:error 'cond-exp "invalid predicate " exp)
  )

(define (report-unpack-unequal-vars-list-count exp)
  (eopl:error 'unpack-exp "Unequal vars and list count ~s" exp)
  )
