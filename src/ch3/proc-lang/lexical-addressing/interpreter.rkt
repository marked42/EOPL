#lang eopl

(require "parser.rkt")
(require "expression.rkt")
(require "environment.rkt")
(require "value.rkt")
(require "procedure.rkt")
(require "translation.rkt")
(provide (all-defined-out))
(require racket/pretty)

(define (run str)
  (let ((prog (scan&parse str)))
    (let ((translated (translation-of-program prog)))
      ; (pretty-print translated)
      (value-of-program translated)
      )
    )
  )

(define (value-of-program prog)
  (cases program prog
    (a-program (exp1) (value-of-exp exp1 (init-env)))
    )
  )

(define (value-of-exps exps env)
  (map (lambda (exp) (value-of-exp exp env)) exps)
  )

(define (value-of-exp exp env)
  (cases expression exp
    ; number constant
    (const-exp (num) (num-val num))
    ; subtraction of two numbers
    (diff-exp (exp1 exp2)
              (let ((val1 (value-of-exp exp1 env))
                    (val2 (value-of-exp exp2 env)))
                (let ((num1 (expval->num val1))
                      (num2 (expval->num val2)))
                  (num-val (- num1 num2))
                  )
                )
              )
    ; true only if exp1 is number 0
    (zero?-exp (exp1)
               (let ((val (value-of-exp exp1 env)))
                 (let ((num (expval->num val)))
                   (if (zero? num)
                       (bool-val #t)
                       (bool-val #f)
                       )
                   )
                 )
               )
    (if-exp (exp1 exp2 exp3)
            (let ((val1 (value-of-exp exp1 env)))
              (if (expval->bool val1)
                  (value-of-exp exp2 env)
                  (value-of-exp exp3 env)
                  )
              )
            )

    (var-exp (var) (eopl:error 'var-exp "Dont allow var-exp ~s" exp))
    (nameless-var-exp (var) (apply-env env var))

    (let-exp (var exp body) (eopl:error 'let-exp "Dont allow let-exp" exp))
    (nameless-let-exp (exp body)
                      (let ((val (value-of-exp exp env)))
                        (value-of-exp body (extend-env (list val) env))
                        )
                      )

    (letrec-exp (p-name b-var p-body body) (eopl:error 'letrec-exp "Dont allow letrec-exp" exp))
    (nameless-letrec-exp (p-body body)
                         (let ((vec (make-vector 1)))
                           (let ((new-env (extend-env-vec vec env)))
                              (vector-set! vec 0 (proc-val (procedure p-body new-env)))
                              (value-of-exp body new-env)
                              )
                            )
                         )

    (proc-exp (var body)
              (eopl:error 'proc-exp "Dont allow proc-exp ~s" exp)
              )
    (nameless-proc-exp (body)
                       (proc-val (procedure body env))
                       )

    (call-exp (rator rand)
              (let ((rator-val (value-of-exp rator env)))
                (let ((proc1 (expval->proc rator-val)) (rand-val (value-of-exp rand env)))
                  (apply-procedure proc1 rand-val)
                  )
                )
              )

    (cond-exp (cond-exps act-exps)
              (let ((cond-vals (value-of-exps cond-exps env))
                    (act-vals (value-of-exps act-exps env))
                    )
                (letrec ((return-first-true-cond
                          (lambda (cond-vals act-vals)
                            (if (null? cond-vals)
                                (report-cond-no-true-predicate exp)
                                (let ((first-cond (car cond-vals))
                                      (first-act (car act-vals))
                                      (rest-conds (cdr cond-vals))
                                      (rest-acts (cdr act-vals))
                                      )
                                  (cases expval first-cond
                                    (bool-val (bool)
                                              (if bool
                                                  first-act
                                                  (return-first-true-cond rest-conds rest-acts)
                                                  )
                                              )
                                    (else (report-cond-invalid-predicate exp))
                                    )
                                  )
                                )
                            )))
                  (return-first-true-cond cond-vals act-vals)
                  )
                )
              )
    (else 42)
    )
  )

(define (apply-procedure proc1 arg)
  (cases proc proc1
    (procedure (body saved-env)
               (value-of-exp body (extend-env (list arg) saved-env))
               )
    )
  )


(define (report-cond-no-true-predicate exp)
  (eopl:error 'cond-exp "No true cond for exp ~s" exp)
  )

(define (report-cond-invalid-predicate exp)
  (eopl:error 'cond-exp "invalid predicate " exp)
  )

(define (report-unpack-unequal-vars-list-count exp)
  (eopl:error 'unpack-exp "Unequal vars and list count ~s" exp)
  )
