#lang eopl

(require "parser.rkt")
(require "expression.rkt")
(require "environment.rkt")
(require "value.rkt")
(require "procedure.rkt")
(require "translation.rkt")
(provide (all-defined-out))
(require racket/pretty)

(define (run str)
  (let ((prog (scan&parse str)))
    (let ((translated (translation-of-program prog)))
      (pretty-print translated)
      (value-of-program translated)
      )
    )
  )

(define (value-of-program prog)
  (cases program prog
    (a-program (exp1) (value-of-exp exp1 (init-env)))
    )
  )

(define (value-of-exp exp env)
  (cases expression exp
    ; number constant
    (const-exp (num) (num-val num))
    ; subtraction of two numbers
    (diff-exp (exp1 exp2)
              (let ((val1 (value-of-exp exp1 env))
                    (val2 (value-of-exp exp2 env)))
                (let ((num1 (expval->num val1))
                      (num2 (expval->num val2)))
                  (num-val (- num1 num2))
                  )
                )
              )
    ; true only if exp1 is number 0
    (zero?-exp (exp1)
               (let ((val (value-of-exp exp1 env)))
                 (let ((num (expval->num val)))
                   (if (zero? num)
                       (bool-val #t)
                       (bool-val #f)
                       )
                   )
                 )
               )
    (if-exp (exp1 exp2 exp3)
            (let ((val1 (value-of-exp exp1 env)))
              (if (expval->bool val1)
                  (value-of-exp exp2 env)
                  (value-of-exp exp3 env)
                  )
              )
            )
    (var-exp (var)
             (apply-env env var)
             )
    (nameless-var-exp (var)
             (apply-env env var)
             )
    (let-exp (var exp body)
             (let ((val (value-of-exp exp env)))
               (value-of-exp body (extend-env var val env))
               )
             )
    (proc-exp (var body)
              (proc-val (procedure var body env))
              )
    (call-exp (rator rand)
              (let ((rator-val (value-of-exp rator env)))
                (let ((proc1 (expval->proc rator-val)) (rand-val (value-of-exp rand env)))
                  (apply-procedure proc1 rand-val)
                  )
                )
              )
    (else 42)
    )
  )

(define (apply-procedure proc1 arg)
  (cases proc proc1
    (procedure (var body saved-env)
               (value-of-exp body (extend-env var arg saved-env))
               )
    )
  )


(define (report-cond-no-true-predicate exp)
  (eopl:error 'cond-exp "No true cond for exp ~s" exp)
  )

(define (report-cond-invalid-predicate exp)
  (eopl:error 'cond-exp "invalid predicate " exp)
  )

(define (report-unpack-unequal-vars-list-count exp)
  (eopl:error 'unpack-exp "Unequal vars and list count ~s" exp)
  )
