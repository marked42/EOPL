#lang eopl

(require "parser.rkt")
(require "expression.rkt")
(require "environment.rkt")
(require "value.rkt")
(provide (all-defined-out))

(define (run str)
  (value-of-program (scan&parse str))
  )

(define (value-of-program prog)
  (cases program prog
    (a-program (exp1) (value-of-exp exp1 (init-env)))
    )
  )

(define (value-of-exp exp env)
  (cases expression exp
    ; number constant
    (const-exp (num) (num-val num))
    ; subtraction of two numbers
    (diff-exp (exp1 exp2)
              (let ((val1 (value-of-exp exp1 env))
                    (val2 (value-of-exp exp2 env)))
                (let ((num1 (expval->num val1))
                      (num2 (expval->num val2)))
                  (num-val (- num1 num2))
                  )
                )
              )
    (sum-exp (exp1 exp2)
             (let ((val1 (value-of-exp exp1 env))
                   (val2 (value-of-exp exp2 env)))
               (let ((num1 (expval->num val1))
                     (num2 (expval->num val2)))
                 (num-val (+ num1 num2))
                 )
               )
             )
    (mul-exp (exp1 exp2)
             (let ((val1 (value-of-exp exp1 env))
                   (val2 (value-of-exp exp2 env)))
               (let ((num1 (expval->num val1))
                     (num2 (expval->num val2)))
                 (num-val (* num1 num2))
                 )
               )
             )
    (div-exp (exp1 exp2)
             (let ((val1 (value-of-exp exp1 env))
                   (val2 (value-of-exp exp2 env)))
               (let ((num1 (expval->num val1))
                     (num2 (expval->num val2)))
                 (num-val (/ num1 num2))
                 )
               )
             )
    (equal?-exp (exp1 exp2)
                (let ((val1 (value-of-exp exp1 env))
                      (val2 (value-of-exp exp2 env)))
                  (let ((num1 (expval->num val1))
                        (num2 (expval->num val2)))
                    (bool-val (equal? num1 num2))
                    )
                  )
                )
    (greater?-exp (exp1 exp2)
                  (let ((val1 (value-of-exp exp1 env))
                        (val2 (value-of-exp exp2 env)))
                    (let ((num1 (expval->num val1))
                          (num2 (expval->num val2)))
                      (bool-val (> num1 num2))
                      )
                    )
                  )
    (less?-exp (exp1 exp2)
               (let ((val1 (value-of-exp exp1 env))
                     (val2 (value-of-exp exp2 env)))
                 (let ((num1 (expval->num val1))
                       (num2 (expval->num val2)))
                   (bool-val (< num1 num2))
                   )
                 )
               )
    (minus-exp (exp1)
               (let ((val1 (value-of-exp exp1 env)))
                 (let ((num1 (expval->num val1)))
                   (num-val (- 0 num1))
                   )
                 )
               )
    ; true only if exp1 is number 0
    (zero?-exp (exp1)
               (let ((val (value-of-exp exp1 env)))
                 (let ((num (expval->num val)))
                   (if (zero? num)
                       (bool-val #t)
                       (bool-val #f)
                       )
                   )
                 )
               )
    (if-exp (exp1 exp2 exp3)
            (let ((val1 (value-of-exp exp1 env)))
              (if (expval->bool val1)
                  (value-of-exp exp2 env)
                  (value-of-exp exp3 env)
                  )
              )
            )
    (var-exp (var)
             (apply-env env var)
             )
    (let-exp (var exp1 body)
             (let ((val1 (value-of-exp exp1 env)))
               (value-of-exp body (extend-env var val1 env))
               )
             )
    (cons-exp (exp1 exp2)
              (let ((val1 (value-of-exp exp1 env)) (val2 (value-of-exp exp2 env)))
                (cell-val val1 val2)
                )
              )
    (emptylist-exp ()
                   (null-val)
                   )
    (else 42)
    )
  )
