#lang eopl

(require "type.rkt"
         "type-environment.rkt"
         "substitution.rkt"
         "unifier.rkt"
         "equal-up-to-gensyms.rkt"
         "../expression.rkt"
         "../parser.rkt"
         )

(provide (all-defined-out))

(define-datatype answer answer?
  (an-answer (ty type?))
  )

(define (type-of-program pgm)
  (reset-fresh-var)
  (initialize-subst!)
  (cases program pgm
    (a-program (exp1)
               (let ([ans (type-of exp1 (init-tenv))])
                 (cases answer ans
                   (an-answer (ty)
                              (apply-subst-to-type ty)
                              )
                   )
                 )
               )
    )
  )

(define (type-of exp tenv)
  (cases expression exp
    (const-exp (num) (an-answer (int-type)))
    (var-exp (var) (an-answer (apply-tenv tenv var)))
    (diff-exp (exp1 exp2)
              (cases answer (type-of exp1 tenv)
                (an-answer (ty1)
                           (unifier ty1 (int-type) exp1)
                           (cases answer (type-of exp2 tenv)
                              (an-answer (ty2)
                                         (unifier ty2 (int-type) exp2)
                                         (an-answer (int-type))
                                        )
                             )
                           )
                )
              )
    (zero?-exp (exp1)
               (let ([ans (type-of exp1 tenv)])
                 (cases answer ans
                   (an-answer (ty1)
                              (unifier ty1 (int-type) exp)
                              (an-answer (bool-type))
                              )
                   )
                 )
               )
    (if-exp (exp1 exp2 exp3)
            (cases answer (type-of exp1 tenv)
              (an-answer (ty1)
                         (unifier ty1 (bool-type) exp1)
                         (cases answer (type-of exp2 tenv)
                            (an-answer (ty2)
                                      (cases answer (type-of exp3 tenv)
                                        (an-answer (ty3)
                                                   (unifier ty2 ty3 exp)
                                                   (an-answer ty2)
                                                  )
                                        )
                                      )
                           )
                         )
              )
            )
    (let-exp (var exp1 body)
             (cases answer (type-of exp1 tenv)
               (an-answer (exp1-type)
                          (type-of body (extend-tenv var exp1-type tenv))
                          )
               )
             )
    (proc-exp (var otype body)
              (let ([var-type (otype->type otype)])
                (cases answer (type-of body (extend-tenv var var-type tenv))
                  (an-answer (result-type)
                             (an-answer (proc-type var-type result-type))
                             )
                  )
                )
              )
    (call-exp (rator rand)
              (let ([result-type (fresh-var-type)])
                (cases answer (type-of rator tenv)
                  (an-answer (rator-type)
                             (cases answer (type-of rand tenv)
                               (an-answer (rand-type)
                                          (unifier rator-type (proc-type rand-type result-type) exp)
                                          (an-answer result-type)
                                          )
                               )
                             )
                  )
                )
              )
    (letrec-exp (p-result-otype p-name b-var b-var-otype p-body letrec-body)
                (let ([p-result-type (otype->type p-result-otype)] [b-var-type (otype->type b-var-otype)])
                  (let ([tenv-for-letrec-body (extend-tenv p-name (proc-type b-var-type p-result-type) tenv)])
                    (cases answer (type-of p-body (extend-tenv b-var b-var-type tenv-for-letrec-body))
                      (an-answer (p-body-type)
                                 (unifier p-body-type p-result-type p-body)
                                 (type-of letrec-body tenv-for-letrec-body)
                                 )
                      )
                    )
                  )
                )
    )
  )

(define (report-rator-not-a-proc-type rator-type rator)
  (eopl:error 'type-of-expression "Rator not a proc type: ~%~s~%had rator type ~s" rator (type-to-external-form rator-type))
  )

(define (check-program-type str)
  (type-to-external-form (type-of-program (scan&parse str)))
  )
