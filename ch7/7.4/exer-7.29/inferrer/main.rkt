#lang eopl

(require "type.rkt"
         "type-environment.rkt"
         "substitution.rkt"
         "unifier.rkt"
         "equal-up-to-gensyms.rkt"
         "../expression.rkt"
         "../parser.rkt"
         )

(provide (all-defined-out))

(define-datatype answer answer?
  (an-answer (ty type?) (subst substitution?))
  )

(define (type-of-program pgm)
  (reset-fresh-var)
  (cases program pgm
    (a-program (exp1)
               (let ([ans (type-of exp1 (init-tenv) (empty-subst))])
                 (cases answer ans
                   (an-answer (ty subst)
                              (apply-subst-to-type ty subst)
                              )
                   )
                 )
               )
    )
  )

(define (type-of exp tenv subst)
  (cases expression exp
    (const-exp (num) (an-answer (int-type) subst))
    ; instantiate generic type when referencing var
    (var-exp (var) (an-answer (instantiate-type (apply-tenv tenv var)) subst))
    (diff-exp (exp1 exp2)
              (cases answer (type-of exp1 tenv subst)
                (an-answer (ty1 subst1)
                           (let ([subst1 (unifier ty1 (int-type) subst1 exp1)])
                             (cases answer (type-of exp2 tenv subst1)
                               (an-answer (ty2 subst2)
                                          (let ([subst2 (unifier ty2 (int-type) subst2 exp2)])
                                            (an-answer (int-type) subst2)
                                            )
                                          )
                               )
                             )
                           )
                )
              )
    (zero?-exp (exp1)
               (let ([ans (type-of exp1 tenv subst)])
                 (cases answer ans
                   (an-answer (ty1 subst1)
                              (let ([subst2 (unifier ty1 (int-type) subst1 exp)])
                                (an-answer (bool-type) subst2)
                                )
                              )
                   )
                 )
               )
    (if-exp (exp1 exp2 exp3)
            (cases answer (type-of exp1 tenv subst)
              (an-answer (ty1 subst)
                         (let ([subst (unifier ty1 (bool-type) subst exp1)])
                           (cases answer (type-of exp2 tenv subst)
                             (an-answer (ty2 subst)
                                        (cases answer (type-of exp3 tenv subst)
                                          (an-answer (ty3 subst)
                                                     (let ([subst (unifier ty2 ty3 subst exp)])
                                                       (an-answer ty2 subst)
                                                       )
                                                     )
                                          )
                                        )
                             )
                           )
                         )
              )
            )
    ; let-polymorphism, generalize exp1 type, type of var will be instantiated when used
    (let-exp (var exp1 body)
             (cases answer (type-of exp1 tenv subst)
               (an-answer (exp1-type subst)
                          (type-of body (extend-tenv var (generalize exp1-type) tenv) subst)
                          )
               )
             )
    (proc-exp (var otype body)
              (let ([var-type (otype->type otype)])
                (cases answer (type-of body (extend-tenv var var-type tenv) subst)
                  (an-answer (result-type subst)
                             (an-answer (proc-type var-type result-type) subst)
                             )
                  )
                )
              )
    (call-exp (rator rand)
              (let ([result-type (fresh-var-type)])
                (cases answer (type-of rator tenv subst)
                  (an-answer (rator-type subst)
                             (cases answer (type-of rand tenv subst)
                               (an-answer (rand-type subst)
                                          (let ([subst (unifier rator-type (proc-type rand-type result-type) subst exp)])
                                            (an-answer result-type subst)
                                            )
                                          )
                               )
                             )
                  )
                )
              )
    (letrec-exp (p-result-otype p-name b-var b-var-otype p-body letrec-body)
                (let ([p-result-type (otype->type p-result-otype)] [b-var-type (otype->type b-var-otype)])
                  (let ([tenv-for-letrec-body (extend-tenv p-name (proc-type b-var-type p-result-type) tenv)])
                    (cases answer (type-of p-body (extend-tenv b-var b-var-type tenv-for-letrec-body) subst)
                      (an-answer (p-body-type subst)
                                 (let ([subst (unifier p-body-type p-result-type subst p-body)])
                                   (type-of letrec-body tenv-for-letrec-body subst)
                                   )
                                 )
                      )
                    )
                  )
                )
    )
  )

(define (report-rator-not-a-proc-type rator-type rator)
  (eopl:error 'type-of-expression "Rator not a proc type: ~%~s~%had rator type ~s" rator (type-to-external-form rator-type))
  )

(define (check-program-type str)
  (type-to-external-form (type-of-program (scan&parse str)))
  )
